{"version":3,"file":"static/js/812.0eb806e9.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent'; //SFM конструкция для проверки состояния процесса и рендеринга компонентов на страницу соответственно\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService(); //деструктуризация переменных loading и error из хука useMarvelService\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId =  setInterval(updateChar, 60000);\r\n\r\n        return () => { //функция очистки, которая позволяет остановить побочные эффекты непосредственно перед размонтированием компонента.\r\n            clearInterval(timerId)\r\n        }  // eslint-disable-next-line\r\n    }, []) //запуск формирования случайного персонажа только при первой визуализации компонента\r\n\r\n    const onCharLoaded = (char) => { //функция по загрузке персонажа\r\n        setChar(char); // {char} - тоже самое что и {char:char}.\r\n    }\r\n\r\n\r\n    const updateChar = () => {\r\n        clearError(); //функция очистки ошибки для отрисовки новых данных\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); //для получения рандомного айди персонажа, math.floor для округленя результата\r\n        getCharacter(id) //работу функции можно посмотреть в MarvelService\r\n            .then(onCharLoaded) //при использовании промисов, если аргументом then - является ссылка на функцию, аргумент, который придет в then будет автоматически передаваться в функцию\r\n            .then(() => setProcess('confirmed'));  //когда процесс запрооса завершен, он переходит в состояние confirmed\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => { //рендерящий компонент, получает объект с данными, как аргумент, принимает в себя и возвращает участок верстки\r\n    const {name, thumbnail, description, homepage, wiki} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch(process) { // специалньая SFM конструкция для проверки состояния процесса и рендеринга компонентов на страницу соответственно\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>; //если будет подзагрузка новых элементов, то спинер запускать не нужно\r\n        case 'confirmed':\r\n            return <Component/>; //рендеринг компонента, если все подтверждено\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false); //загрузка новых персонажей\r\n    const [offset, setOffset] = useState(210); //текущий отступ списка персонажей в сервисе Марвел АПИ, добавлено для изменений\r\n    const [charEnded, setCharEnded] = useState(false);  //на сервисе закончились персонажи\r\n\r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true); //будет подставлен offset, равный 9. Второй аргумент true для первичной загрузки\r\n         // eslint-disable-next-line\r\n    }, [])   //запуск формирования листка персонажей только при первой визуализации компонента\r\n  \r\n    const onRequest = (offset, initial) => { // функция по формированию листка персонажей, в том числе по клику\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true); //если загрузка первичная, то загрузку запускать надо. При повторной загрузке состояние true, то есть не нужно запускать спиннер\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'));  //когда процесс запрооса завершен, он переходит в состояние confirmed\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => { //функция по загрузке листа персонажей\r\n        let ended = false; //спец переменная для установки окончания перснажей\r\n        if (newCharList.length < 9) { //если кол-во персонажей при загрузке меньше 9, значит персонажи закончились\r\n            ended = true;\r\n        }\r\n        setCharList(charList => [...charList, ...newCharList]);//формирование нового массива из новых и старых элементов. При первом запуске, в этой функции массив charList пустой и формируется только из newCharList\r\n        setNewItemLoading(false);\r\n        setOffset(offset => offset + 9); //увеличение отступа персонажей на 9, для дозагрузки новых персонажей\r\n        setCharEnded(ended); //метка для окончания персонажей\r\n    }\r\n\r\n    const itemRefs = useRef([]); //это массив, в котором будут храниться ссылки на DOM-элементы, создан, чтобы иметь доступ к элементам по индексу\r\n    \r\n    const focusOnItem = (id) => { //это функция, которая принимает id (индекс) элемента, который нужно сфокусировать\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected')); //удаляет класс 'char__item_selected' у всех остальных элементов\r\n        itemRefs.current[id].classList.add('char__item_selected'); //добавляет класс к выбранному элементу\r\n        itemRefs.current[id].focus(); //метод focus() для установки фокуса на выбранном элементе\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'}; //для нормального формата изображения\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n            return (\r\n                <li\r\n                    className='char__item'\r\n                    tabIndex={0}\r\n                    ref={el => itemRefs.current[i] = el} //коллбэк реф, который принимает в себя единственным аргументом тот элемент, на котором он был вызван, в данном случае это list item (li). Перееносим li в массив\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id); //получение id для передачи пропса происходит из объекта в MarvelService\r\n                        focusOnItem(i); //вызов функции фокуса\r\n                    }}\r\n                    onKeyDown={(e) => { //управление элементами нажатием клавиш\r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}>\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                        <div className='char__name'>{item.name}</div>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className='char__grid'>\r\n                    {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => { //useMemo для того, чтобы предотвратить повторный рендеринг компонента из-за стейта идущего из MainPage\r\n        return setContent(process, () => renderItems(charList), newItemLoading);\r\n         // eslint-disable-next-line\r\n    }, [process])\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button className=\"button button__main button__long\"\r\n                    disabled={newItemLoading}\r\n                    style={{'display': charEnded ? 'none' : 'block'}} //ecли charEnded (закончились персонажи на сервиса) true - display: none, иначе display: block\r\n                    onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = { //проверка типа пропов и то, что он действительно пришел\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n         // eslint-disable-next-line\r\n    },[props.charId]) //отслеживать состояние props.charId и вызывать обновление\r\n\r\n\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props; //получение айди из пропсов\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError(); //очистка ошибки для отрисовки новых данных\r\n        getCharacter(charId) //получение персонажа по айди\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));  //когда процесс запрооса завершен, он переходит в состояние confirmed\r\n    }\r\n\r\n    const onCharLoaded = (char) => { //функция по загрузке персонажа\r\n        setChar(char);  // {char} - тоже самое что и {char:char}.\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n    //конструкция для настройки нормальной формы изображения\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n\r\n    return (\r\n        \r\n        //реакт фрагмент из-за отсутствия общего родительского компонента\r\n        <> \r\n                <div className=\"char__basics\">\r\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                    <div>\r\n                        <div className=\"char__info-name\">{name}</div>\r\n                        <div className=\"char__btns\">\r\n                            <a href={homepage} className=\"button button__main\">\r\n                                <div className=\"inner\">homepage</div>\r\n                            </a>\r\n                            <a href={wiki} className=\"button button__secondary\">\r\n                                <div className=\"inner\">Wiki</div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"char__descr\">\r\n                    {description}\r\n                </div>\r\n                <div className=\"char__comics\">Comics:</div>\r\n                <ul className=\"char__comics-list\">\r\n                    {comics.length > 0 ? null : \"There is no comics with this character...\"} \r\n                    {\r\n                        comics.map((item, i) => {\r\n                            // eslint-disable-next-line\r\n                            if (i > 9) return;\r\n                            return (\r\n                                <li key = {i} className=\"char__comics-item\">\r\n                                    {item.name}\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = { //проверка типа пропов\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n    \r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError(); //очистка ошибки для отрисовки новых данных\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));  //когда процесс запрооса завершен, он переходит в состояние confirmed\r\n            \r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n\r\n    return(\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{ //специальный объект, в который помещаются необходимые инпуты формы\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({ //проверка соответствия валидации при помощи библиотеки\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form> {/* Тоже часть работы формика, спец компонент, который имеет контекст и все спец функции библиотеки */}\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\"\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n        this.setState ({\r\n            error:true,\r\n        })\r\n    }\r\n\r\n    render () {\r\n        if (this.state.render) {\r\n           return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n           \r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) =>{\r\n        setChar(id);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div> {/* div, для того, чтобы обернуть CharInfo и CharSearchForm в один блок, чтобы grid нормально отобразил их на странице в отдельном блоке */}\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId = {selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey ='apikey=346cb8ad17bfaf962c6faf338c99e4b4';\r\n\r\n    const _baseOffset = 210\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) =>{\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter); //массив данных персонажей, которые в колбэке превращаются в массив объектов нужного формата\r\n    }\r\n\r\n    const getCharacter = async (id) =>{ //функция по получению персонажа и возврата данных в объект\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]); //оптимизация, передача сразу необходимого объекта персонажа\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n    \r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request (\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n            );\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => { //функция по трансформации возвращаемого с сервера объекта в необходимые для нашего объекта данные\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description \r\n                ? `${char.description.slice(0, 210)}...` \r\n                : 'There is no description for this character', //Обрезать описание, если слишком большое, а если текста нет, вставлять текст об отсутствии описания\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => { //функция по трансформации возвращаемого с сервера объекта комикса в необходимые для нашего объекта данные\r\n        return {\r\n            id: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n            // ?. оператор опциональной цепочки, если comics.textObjects[0]?.language нет, то тогда значение будет undefined, вместо генерации ошибки\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n        }\r\n    }\r\n\r\n    return {\r\n        process,\r\n        setProcess,\r\n        getAllCharacters, \r\n        getCharacter, \r\n        clearError,\r\n        getComic,\r\n        getAllComics,\r\n        getCharacterByName,\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => { //хук для запроса и сохранения локальных состояний\r\n\r\n    const [process, setProcess] = useState('waiting') //state для SFM, ожидание\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'aplication/json'}) => { //useCallback, гарантирует, что функция request будет создана только один раз при инициализации компонента и будет повторно использоваться на следующих рендерах.\r\n        \r\n\r\n        setProcess('loading'); //SFM state когда инициируется request, процесс переходит в loading\r\n        try {\r\n            const response = await fetch (url, {method, body, headers}); //асинхронный запрос на сервер среди аргументов fetch адрес сервера и объект, принимающий настройки\r\n\r\n            if (!response.ok) { //eсли статус ответа не является успешным (например, 404 или 500), выбрасывает объект ошибки\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data; //возврат данных от сервера\r\n        } catch(e) {\r\n\r\n            setProcess('error');\r\n            throw e; //выкидываем ошибку переменную e\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n\r\n        setProcess('loading'); //если произошла ошибка, нужно процесс поставить в загрузку\r\n    }, []); //очистка ошибки со страницы, чтобы можно было получить другой результат\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) { //SFM конструкция для проверки состояния процесса и рендеринга компонентов на страницу соответственно\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","thumbnail","description","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","comics","_Fragment","charId","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","error","_createClass","value","errorInfo","console","log","this","setState","render","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}