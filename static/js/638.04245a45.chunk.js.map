{"version":3,"file":"static/js/638.04245a45.chunk.js","mappings":"oLAkDA,UA1CmB,SAAHA,GAA+B,IAA1BC,EAASD,EAATC,UAAWC,EAAQF,EAARE,SACrBC,GAAMC,EAAAA,EAAAA,aAAND,GACPE,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkEC,EAAAA,EAAAA,KAA3DC,EAAQF,EAARE,SAAUC,EAAYH,EAAZG,aAAcC,EAAUJ,EAAVI,WAAYC,EAAOL,EAAPK,QAASC,EAAUN,EAAVM,YAEpDC,EAAAA,EAAAA,YAAU,WACNC,GAEJ,GAAE,CAAChB,IAIH,IAAMgB,EAAa,WAGf,OAFAJ,IAEQb,GACJ,IAAK,QACDW,EAASV,GAAIiB,KAAKC,GACjBD,MAAK,kBAAMH,EAAW,YAAY,IACnC,MACJ,IAAK,YACDH,EAAaX,GAAIiB,KAAKC,GACrBD,MAAK,kBAAMH,EAAW,YAAY,IACnC,MACJ,QACI,MAAM,IAAIK,MAAM,4BAE5B,EAEMD,EAAe,SAACZ,GAClBC,EAAQD,EACZ,EAEA,OACKc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACGC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,KACTC,EAAAA,EAAAA,GAAWZ,EAASf,EAAWQ,KAG5C,C,8EC5BA,EAjBiB,WACb,OACIc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAGG,UAAU,eAAcJ,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,WAAUJ,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKM,UAAU,yBAAwBJ,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKG,UAAU,4BACfH,EAAAA,EAAAA,KAAA,OAAKG,UAAU,6BAEnBH,EAAAA,EAAAA,KAAA,OAAKG,UAAU,2BACfH,EAAAA,EAAAA,KAAA,OAAKG,UAAU,2BACfH,EAAAA,EAAAA,KAAA,OAAKG,UAAU,+BAI/B,E,UCEA,EAfmB,SAACb,EAASf,EAAWQ,GACpC,OAAOO,GACH,IAAK,UACD,OAAOU,EAAAA,EAAAA,KAACI,EAAQ,IACpB,IAAK,UACD,OAAOJ,EAAAA,EAAAA,KAACK,EAAAA,EAAO,IACnB,IAAK,YACD,OAAOL,EAAAA,EAAAA,KAACzB,EAAS,CAACQ,KAAMA,IAC5B,IAAK,QACD,OAAOiB,EAAAA,EAAAA,KAACM,EAAAA,EAAY,IACxB,QACI,MAAM,IAAIV,MAAM,4BAE5B,C","sources":["components/pages/SinglePage.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport setContent from '../../utils/setContent';\r\n\r\n//универсальный компонент для singleComic и singleCharacter, рендерится в соответствии с переданными пропсами Component и dataType\r\nconst SinglePage = ({Component, dataType}) => {\r\n    const {id} = useParams(); //получение данных из объекта хуком useParams, получаем данные из url\r\n    const [data, setData] = useState(null);\r\n    const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n         // eslint-disable-next-line\r\n    },[id]) //отслеживать состояние id и вызывать обновление\r\n\r\n\r\n\r\n    const updateData = () => {\r\n        clearError(); //очистка ошибки для отрисовки новых данных\r\n\r\n        switch (dataType) { //проверяем тип данных\r\n            case 'comic': //если комикс в пропсах, соответственно вызов метода по получению комикса с апишки\r\n                getComic(id).then(onDataLoaded)\r\n                .then(() => setProcess('confirmed'));  //когда процесс запрооса завершен, он переходит в состояние confirmed\r\n                break;\r\n            case 'character': //если персонаж в пропсах, соответственно метод по получению персонажа с апишки\r\n                getCharacter(id).then(onDataLoaded)\r\n                .then(() => setProcess('confirmed'));  //когда процесс запрооса завершен, он переходит в состояние confirmed\r\n                break;\r\n            default:\r\n                throw new Error('Unexpected process state');\r\n        }\r\n    }\r\n\r\n    const onDataLoaded = (data) => { //функция по загрузке данных\r\n        setData(data);  // {data} - тоже самое что и {data:data};\r\n    }\r\n\r\n    return (\r\n         <>\r\n            <AppBanner/>\r\n            {setContent(process, Component, data)}\r\n         </>\r\n    )\r\n}\r\n\r\n\r\nexport default SinglePage;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) { //SFM конструкция для проверки состояния процесса и рендеринга компонентов на страницу соответственно\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["_ref","Component","dataType","id","useParams","_useState","useState","_useState2","_slicedToArray","data","setData","_useMarvelService","useMarvelService","getComic","getCharacter","clearError","process","setProcess","useEffect","updateData","then","onDataLoaded","Error","_jsxs","_Fragment","children","_jsx","AppBanner","setContent","className","Skeleton","Spinner","ErrorMessage"],"sourceRoot":""}